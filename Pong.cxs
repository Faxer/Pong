Strict
Import Mojo

Function Main:Int()
	Local theapp:Pong = New Pong 
	Return 0
End Function

Class RETVAL
	Const colx:Int = 1
	Const coly:Int = 2

	
End Class

Class Pong Extends App
	Field mycourt:Court
	
	Method OnCreate:Int()
		mycourt = New Court(100,100,DeviceWidth()-200,DeviceHeight()-200)
		Return 0
	End Method
	
	Method OnUpdate:Int()
		mycourt.Update
		Return 0
	End Method
	
	Method OnRender:Int()
		mycourt.Render
		Return 0
	End method


End Class

Class Court
	Field x:Int
	Field y:Int
	Field sizex:Int
	Field sizey:Int
	Field timer:Int = 0
	Field timerbuffer:int = 0
	
	Field theball:Ball 
	
	Method New(x:Int,y:Int,sizex:Int,sizey:Int)
		SetUpdateRate(0)
		Self.x = x
		Self.y = y
		Self.sizex = sizex
		Self.sizey = sizey
		
		theball = New Ball(DeviceWidth()/2,DeviceHeight()/2,10,1,1)

	End Method
	
	Method Update:Int() 
		timer = Millisecs() - timerbuffer
		timerbuffer = timer
		theball.Update
		theball.AddSpeed(timer/1000)
		theball.DirectionHandeler(Collision())
		Return 0
	End Method
	
	Method Render:Int()
		Cls(0,0,0)
		DrawRect(x,y,sizex,sizey)
		SetColor(0,0,0)
		DrawRect(x+5,y+5,sizex-10,sizey-10)
		theball.Render
		Return 0
	End Method
	
	Method Collision:Int()
		If theball.x < x
			Return RETVAL.colx
		Elseif theball.x > x+sizex 
			Return RETVAL.colx
		Elseif theball.y < y
			Return RETVAL.coly
		Elseif theball.y > y+sizey
			Print "COOOOL"
			Return RETVAL.coly
		Endif
		
		Return 0
	End Method

End Class

Class Ball
	Field x:Float
	Field y:float
	Field size:Int
	Field speed:Float = 0.5
	Field direction:Vec2i
	
	Method New(x:Int,y:Int,size:Int,dirx:Int,diry:int)
		Self.x = x
		Self.y = y
		Self.size = size
		Self.direction = New Vec2i(dirx,diry)
	End Method
	
	Method Update:Int()
'		Print "x"+x
'		Print "y"+y
		Print "directionx"+direction.x
		Print "directiony"+direction.y	
		Return 0
	End Method
	
	Method Render:Int()
		SetColor(255,255,255)
'		DrawRect(x-0.5*size,y-0.5*size,size,size)
		DrawRect(x,y,size,size)
		return 0
	End Method

	Method AddSpeed:Void(time:Int)
		x = x+(speed*time*direction.x)
	'	Print x
		y = y+(speed*time*direction.y)

	'	Print "AddSpeed"
	End Method
	
	Method DirectionHandeler:void(change:Int)
		If change = RETVAL.colx	
				direction.x = direction.x*-1		
		Elseif change = RETVAL.coly
			direction.y = direction.y*-1
		Endif
		
	End Method
	
End Class


Class Vec2i
	Field x:Int
	Field y:Int
	
	Method New (x:Int,y:Int)
		Self.x=x
		Self.y=y
	
	End Method


End Class
