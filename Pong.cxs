Strict
Import Mojo

Function Main:Int()
	Local theapp:Pong = New Pong 
	Return 0
End Function

Class RETVAL
	Const colx:Int = 1
	Const coly:Int = 2

	
End Class

Class Pong Extends App
	Field mycourt:Court
	
	Method OnCreate:Int()
		mycourt = New Court(100,100,DeviceWidth()-200,DeviceHeight()-200)
		Return 0
	End Method
	
	Method OnUpdate:Int()
		Local nowtime:= Millisecs() 
		
		mycourt.Update(nowtime)
		Return 0
	End Method
	
	Method OnRender:Int()
		mycourt.Render
		Return 0
	End method

	Method OnSuspend:Int()
		Print " OnSuspend" 
		Return 0
	End
	
	Method OnResume:Int()
		mycourt.oldtime = Millisecs()
		Print " OnResume" 
		Return 0
	End	
	

End Class

Class Court
	Field x:Int
	Field y:Int
	Field sizex:Int
	Field sizey:Int
	Field oldtime:int  
	
	Field theball:Ball 
	
	Method New(x:Int,y:Int,sizex:Int,sizey:Int)
		SetUpdateRate(0)
		Self.x = x
		Self.y = y
		Self.sizex = sizex
		Self.sizey = sizey
		
		theball = New Ball(DeviceWidth()/2,DeviceHeight()/2,10,1,1)

	End Method
	
	Method Update:Int(nowtime:Int) 
		 
		Local deltatime:Float= Float(nowtime- oldtime)/1000.0
		
		oldtime = nowtime
		ResolveMoves(deltatime)
		 
		theball.Applymove() 

		Return 0
	End Method
	
	Method ResolveMoves:Void(deltatime:Float)
	
		Local deltaspeed:Float = theball.speed*deltatime
			
		theball.movevec  = New Vec2f(deltaspeed*theball.direction.x,deltaspeed*theball.direction.y)
	 
	
		Collision(theball)
		
	
	End 
	
	
	Method Render:Int()
		Cls(0,0,0)
		SetColor(255,0,0)
		DrawRect(x-1,y-1,sizex+2,sizey+2)
		SetColor(0,0,0)
		DrawRect(x,y,sizex,sizey)
		theball.Render
		Return 0
	End Method
	
	Method Collision:Void(ball:Ball)

		If ball.x < x 
			ball.movevec.x *=-1
			ball.direction.x *=-1	 
		Elseif ball.x > x + sizex - ball.size 
			ball.movevec.x *=-1
			ball.direction.x *=-1	 
		Elseif ball.y < y  
			ball.movevec.y *=-1
			ball.direction.y *=-1	 
		Elseif ball.y > y+sizey - ball.size  
'			Print "Bottom bounce"
			ball.movevec.y *=-1
			ball.direction.y *=-1
	 
		Endif
		
	 
	End Method

End Class

Class Ball
	Field x:Float
	Field y:Float
	Field size:Float
	Field speed:Float = 50
	Field direction:Vec2f
	Field movevec:= New Vec2f	
	
	Method New(x:Int,y:Int,size:Int,dirx:Int,diry:int)
		Self.x = x
		Self.y = y
		Self.size = size
		Self.direction = New Vec2f(dirx,diry)
	End Method
	
	Method Applymove:Int()
		x += movevec.x
		y += movevec.y


		Return 0
	End Method
	
	Method Render:Int()
		SetColor(255,255,255)
'		DrawRect(x-0.5*size,y-0.5*size,size,size)
		DrawRect(x,y,size,size)
		return 0
	End Method

 
 
	
End Class


Class Vec2i
	Field x:Int
	Field y:Int
	
	Method New (x:Int,y:Int)
		Self.x=x
		Self.y=y
	
	End Method


End Class


Class Vec2f
	Field x:Float
	Field y:Float
	
	Method New (x:Float,y:Float)
		Self.x=x
		Self.y=y
	
	End Method


End Class


